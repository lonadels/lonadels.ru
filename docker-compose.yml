services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    networks:
      - app-network

  # HTTP-only nginx for initial certificate issuance (profile: init)
  nginx_init:
    image: nginx:latest
    container_name: nginx-init
    profiles: ["init"]
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.init.conf:/etc/nginx/nginx.conf:ro
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  # One-shot initial certificate issuance (do not start by default)
  certbot_init_main:
    image: certbot/certbot:latest
    profiles: ["init"]
    depends_on:
      - nginx_init
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    command: >-
      certonly --webroot -w /var/www/certbot
      -d lonadels.ru -d www.lonadels.ru
      --email lonadels@ya.ru --agree-tos --no-eff-email

  certbot_init_registry:
    image: certbot/certbot:latest
    profiles: ["init"]
    depends_on:
      - nginx_init
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    command: >-
      certonly --webroot -w /var/www/certbot
      -d registry.lonadels.ru
      --email lonadels@ya.ru --agree-tos --no-eff-email

  main-app:
    image: registry.lonadels.ru/lonadels/lonadels.ru:latest
    container_name: main-app
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      OUTLINE_API_URL: ${OUTLINE_API_URL}
      OUTLINE_FINGERPRINT: ${OUTLINE_FINGERPRINT}
      HOST_IP: ${HOST_IP}
      API_KEY: ${API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  registry:
    image: registry:2
    container_name: docker-registry
    restart: unless-stopped
    environment:
      REGISTRY_HTTP_ADDR: 0.0.0.0:5000
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
    volumes:
      - ./docker/registry/auth:/auth
      - ./docker/registry/data:/var/lib/registry
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:

